
@using NWTradersWeb.Models;
@model Customer

@{
    Customer currentCustomer = Session["currentCustomer"] as Customer;
    Boolean hasOrderDetails = currentCustomer.myShoppingCart != null && currentCustomer.myShoppingCart.Order_Details.Count() > 0;
}

<!-- Shopping Cart (CurrentOrder) for the customer.-->
<div class="d-flex flex-column gap-0 shopping-cart">
    <div class="py-2 text-center primary cart-radius">
        <i class="fas fa-shopping-cart fa-lg"> </i>
        Your Cart
    </div>
    @if (!hasOrderDetails)
        {
            <div class="empty-cart text-center p-3">cart empty</div>
        }
    else
            {
            <div class="d-flex flex-column gap-1">
                @foreach (Order_Detail od in currentCustomer.myShoppingCart.Order_Details)
                {
                    <div class="d-flex flex-column gap-0">
                        <div class="sub-header">
                            @Html.DisplayFor(item => od.Product.ProductName)
                        </div>
                        <div class="sub-body">
                            <div class="d-flex flex-row">
                                <div>
                                    @Html.ActionLink(
                                   "+", // the link displayed
                                   "AddToCart", // the function to call
                                   "Customers", // the name of the controller
                                   new { @ProductID = od.ProductID }, // Any paramters sent to the function.
                                   new
                                        {// Any formatting applied
                                       @class = "btn badge rounded-pill text-bg-success",
                                       @style = "color:green",
                                       @title = "Add one item"
                                   }
                               )
                                </div>
                                <div>
                                    Quantity: @Html.DisplayFor(item => od.Quantity)
                                </div>
                                <div>
                                    @Html.ActionLink(
                                   "-", // the link displayed
                                   "RemoveFromCart", // the function to call
                                   "Customers", // the name of the controller
                                   new { @ProductID = od.ProductID }, // Any paramters sent to the function.
                                   new
                                        { // Any formatting applied
                                       @class = "btn badge rounded-pill text-bg-danger",
                                       @style = "color:firebrick",
                                       @title = "Remove one item"
                                   }
                               )
                                </div>
                            </div>
                            <div>Sub-Total: @Html.DisplayFor(item => od.Total)</div>
                        </div>
                    </div>
                }
            </div>
            }

<div class="d-flex p-2 justify-content-end">
    @if (hasOrderDetails)
    {
        @Html.ActionLink("Check Out", "Create", "Orders",
                new { },
                new
                     {
                    @class = "btn btn-primary btn-sm small"
                }
                )
    }
    else
    {
        @Html.ActionLink("Check Out", "Create", "Orders",
        new { },
        new
             {
            @class = "btn btn-primary btn-sm small disabled"
        }
        )
    }

</div>
</div>

<style>
    .shopping-cart {
        border: 1px solid var(--secondary); 
        border-radius: 4px;
    }
    .cart-radius {
        border-radius: 4px 4px 0 0;
    }

    .empty-cart {
        border-top: 1px solid var(--secondary);
        font-size: small;
    }
</style>

