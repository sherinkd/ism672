<!--
    This begins an html comment ... "<!-- "
    Index page for Customer - No Login required.
    This a Razor Page ... it combines standard HTML (HTML 5.0) with C# code ...
    each C# block of code begins with an "at" sign ... multiple lines of C# code are enclosed in a block {}
    The corresponding close is here.
    -->
<!-- The using directives are exactly the same as in the C# code ... just like we have done in every C# file we wrote.
    -->
@using NWTradersWeb.Models;


<!--
    Every MVC page has a model supplied by the controller.
    It is the data provided to the controller to the page ...
    it is the data supplied by the return View(model) statement in the function with the same name as the page.

    The model for this page is specified below as a (Paged) List of Customer Objects.
    A paged list is a list that can be displayed as individual pages with a page number and a size.
    It is literally a list that can be broken into customizable size pages and allows you to navigate pages.
-->

@model IEnumerable<Customer>

@{

    // A viewbag is used to carry information (other than the model) from the controller function to a page.
    // You essentially put informaiton into the view bag in the controller and it is available to collect or use in the page.
    ViewBag.Title = "Customers of NW Traders ";

    // Page Sizing - The paged list gives you a property that counts the TOTAL number of items in the list.
    int NumberOfCustomers = Model.Count();

    // Get the list of countries from utilities
    List<string> countries = NWTradersUtilities.AllCountries().ToList();
    countries.Insert(0, ""); // Add an empty string to represent All - you could also use the word all here.

    // Get the list of contact titles from utilities
    List<string> titles = NWTradersUtilities.AllTitles().ToList();
    titles.Insert(0, ""); // Add an empty string to represent All - you could also use the word all here.


}


<!--
    Begin Search  Form
    A form is an HTML client-side mechanism
    to send information to the Controller on the web server in the form of a Request
    and get information back from the Controller as a "Response".
    The calling page (the page that sends the request) sends the request with two
    get the response back in the form of two objects, in the MVC model:
        i.      A Model that provides the main data for the page.
        ii.     A ViewBag that contains a collection of objects which the controller adds,
                and "carries" them to the calling page as part of the response.

    More on the viewbag, the Viewbag is a collection of object that carries information from the page to the controller
    and then brings information from the controller to the page.
   -->
<!-- Search Bar-->
@using (Html.BeginForm())
// The form begins and ends on the with the curly braces.
{
    @Html.AntiForgeryToken()

<div class="container shadow rounded-2 w3-leftbar w3-bottombar py-2">
    <!-- Search routines ...
        Test and show results of this for Assignment #0 add more fields here for Assignment #1 -->
    <!-- Top Search Bar-->
    <div class="navbar mb-n4">
        <div class="nav">
            <div class="navitem">
                <h5>
                    Search for Customers
                </h5>
            </div>
        </div>

        <div>

        </div>

        <div class="navbar" style="">
            <!-- Search Button -->
            <div class="button btn rounded-lg w3-hover-shadow small nav-item mt-n1"
                 onclick="this.form.submit();"
                 title="Click to Search Customers">
                <i class="fa-solid fa-magnifying-glass fa-lg" style="color:darkblue"> </i>
                <span class="small"> Search  </span>
            </div>

            <!-- Reset View-->
            <div class="button btn rounded-lg w3-hover-shadow small nav-item mt-n1"
                 title="Click to reset view - The reset needs to be implemented."
                 onclick="alert('A Place Holder - Add more search fields and other functionality in Assignment 1');">
                <i class="fa-solid fa-rotate fa-lg" style="color: forestgreen"> </i>
                <span class="small"> Reset </span>
            </div>

        </div>
    </div>

    <!-- Bottom Search Bar-->
    <div class="navbar mt-n4 small">

        <div>
            <!-- Search by Customer Company Name.-->
            <span class="p-1">Customer Company Name</span>
            <div class="input-group-sm  nav-item">
                @Html.TextBox("SearchCompanyName", // Name of the variable passed to the controller - typically the same as "name" below.
                        @ViewBag.searchCompanyName as string, // the variable that is displayed.
                 new
                 {
                     // these are HTML properties used to manage the display of the text box.
                     @class = "form-control",
                     @type = "text",
                     @name = "searchCompanyName",
                     @placeholder = "Search by Company",
                     onchange = "this.form.submit();",
                     value = ViewBag.currentSearchCompanyName
                 })
            </div>
        </div>

        <div>
            <!-- Select Country..-->
            <span class="p-1">Country</span>
            <div class="input-group-sm  nav-item">
                @Html.DropDownList("searchCountryName",
                        new SelectList(countries), // this is the only functional difference from the textbox - it is the list of strings displayed in the dropdown.
                 new
                 {
                     @class = "form-select form-control",
                     @name = "searchCountryName",
                     onchange = "this.form.submit();"
                 })
            </div>
        </div>

        <div>
            <!-- Select title..-->
            <span class="p-1">Title</span>
            <div class="input-group-sm  nav-item">
                @Html.DropDownList("searchTitle", new SelectList(titles),
                 new
                 {
                     @class = "form-select form-control",
                     @name = "searchTitle",
                     onchange = "this.form.submit();"
                 })
            </div>
        </div>
    </div>

</div>
}

<!-- Table of Results -->
<div class="container shadow-sm rounded-2 p-4 mt-2">

    @if (NumberOfCustomers > 0)
    {

        <table class="table table-hover"
               id="CustomersTable"
               style="font-size:small; width:100%">

            <thead>
                <tr class="">
                    <th>Customer</th>
                    <th>Contact</th>
                    <th>Title</th>
                    <th>Address</th>
                    <th>City</th>
                    <th>Country</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in Model)
                {
                    // What is the data type - this is a question you should always ask when you read or write code.
                    // What is the data type of "item"?
                    // What is the data type of Model?
                    // What is the data type of each item."Field Name"?
                    <tr>
                        <td>@Html.DisplayFor(modelItem => item.CompanyName)</td>
                        <td>@Html.DisplayFor(modelItem => item.ContactName)</td>
                        <td>@Html.DisplayFor(modelItem => item.ContactTitle)</td>
                        <td>@Html.DisplayFor(modelItem => item.Address)</td>
                        <td>@Html.DisplayFor(modelItem => item.City)</td>
                        <td>@Html.DisplayFor(modelItem => item.Country)</td>
                    </tr>
                }
            </tbody>
        </table>
    }
    else
    {
            <div class="container my-4 py-5 w3-topbar w3-bottombar col-6 rounded-2 shadow">
                <div class="card-body  text-center">
                    <h5> Use the search bar to enter Customer Search Criteria. </h5>
                </div>
            </div>
    }

</div>



<script type="text/javascript">

    $(document).ready(function ()
    {

    /*
    The variable from the page (C#) is not directly available to the script - JS
    We need to get the value of the JS variable - numberOfCustomers from the C# variable NumberOfCustomers.
    */
    var numberOfCustomers = '@NumberOfCustomers';

        if (numberOfCustomers > 0) {
            $('#CustomersTable').DataTable(
                {
                    scrollCollapse:true,
                    scrollX: false,
                    scrollY: 500,

                    paging: true,
                    pageLength: 20,

                    searching: true,
                    order: [0, 'asc'],

                }
            );
        }
    });


</script>
